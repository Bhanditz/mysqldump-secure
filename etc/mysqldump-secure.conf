######################################################################
# Output files/folders
######################################################################

# Target output Directory
DUMP_PATH="/var/mysqldump-secure"

# Prefix for database dump file name
DUMP_FILE_PRE="$(date '+%Y-%m-%d')_$(date '+%H-%M')__"

# File/Folder permission of Target directory ($DUMP_PATH)
# and the actual dumped databases.
# If not otherwise needed, leave the
# protective secure default values
DUMP_DIR_CHMOD="0700"
DUMP_FILE_CHMOD="0400"



######################################################################
# MySQL Connection settings
######################################################################

#
# Credentials file
#

# Never ever pass the mysql credentials on the command line via
# --password / -p as this can be seen by all users in ps aux or top.
# Instead use a *.cnf file with a host, user and password combination.
#
# @info: Must be chmod 0400
#
MYSQL_CNF_FILE="/etc/mysqldump-secure.cnf"


#
# SSL
#

# If this is set to true, an SSL connection is required and the program will fail,
# if it is using a plain connection.
# This option is turned off by default, as most dumps are done locally.
# Turn it on to force SSL and die for plain connections.
# Values:
# -------
# 1: Enabled
# 0: Disabled (Default)
MYSQL_SSL_ENABLE=0

# Required when $MYSQL_SSL_ENABLE is enabled
# Specify the full path to the certificate authority pem file.
MYSQL_SSL_CA_PEM="/path/to/ca.pem"

# (Optional)
# If the user account was created with the 'REQUIRE X509' option,
# then the client must also specify the proper client key and certificate
# files or the server will reject the connection.
#MYSQL_SSL_CLIENT_CERT_PEM="/path/to/client-cert.pem"
#MYSQL_SSL_CLIENT_KEY_PEM="/path/to/client-key.pem"



######################################################################
# Database options
######################################################################
#
# By default, all existing mysql databases will be backed up
# without having to explicitly specifying them.
#
# You can however fine-adjust it by ignoring certain databases
# from the backup procedure below.
#



# Opt out (Ignore)
#
# A space-separated list of databases not to be dumped (ignored).
#
# Note 1:
# -------
# Be aware that $REQUIRE overwrites the ignored databases.
# You can ignore all databases here and explicitly only require
# the ones you actually want to dump.
# If you ignore 'mysql' and require 'mysql',
# it wil be back-upped.
#
#
# Note 2:
# -------
# The asterisk character '*' can be used as a wildcard.
#
# Examples:
# ---------
# IGNORE=""             # <-- Empty: Nothing will be ignored
# IGNORE="*"            # <-- ignores all dbs
# IGNORE="db*"          # <-- ignores all dbs starting with db
# IGNORE="*_schema"     # <-- ignores all dbs ending with _schema (such as information_schema and performance_schema)
# IGNORE="*_schema db*" # <-- Multiple wildcards are also allowed
# IGNORE="mysql"        # <-- Ignore by matching the exact name
IGNORE="information_schema performance_schema"


# Opt-in (Require)
#
# A space-separated list of databases that are explicitly required.
#
# If any of the specified required databases is not existent
# the script will generate an error after finishing (stderr, exit code and inside the logfile).
#
# Additionally, this information is also used by the nagios plugin and will automatically
# throw an error in nagios when any of the below specified databases were not found and/or not dumped.
#
# NOTE: The here specified databases are not guaranteed to be dumped,
#       because they might not even exist, it is rather
#       a method of letting you know, that they could not be dumped.
#
# NOTE: Use this to overwrite any ignored databases.
#       You could for example ignore all databases and only
#       require the once you desire here.
REQUIRE="mysql"





######################################################################
# MySQL Dump settings
######################################################################

#
# Custom MySQLDump Options
#

# Adjust as needed, but note that some options are blacklisted, because
# mysqldump-secure will take care about them itself.
#
# Some useful options:
# --------------------
# --default-character-set=utf8 (make sure to use utf8)
# --routines (Off by default)
# --events   (Off by default)
# --triggers (On by default)
# --hex-blob (be on the safe side)
# --complete-insert (be on the safe side)
# --extended-insert (save spaced)
# --compress (try to compress client/server communication if both support it)
# --opt      (On by default, but blacklisted by mysqldump-secure, as we add it manually)
#   Included in --opt:
#    --add-drop-table
#    --add-locks
#    --create-options
#    --disable-keys
#    --extended-insert
#    --lock-tables
#    --quick               <-- blacklisted
#    --set-charset
MYSQL_OPTS="--default-character-set=utf8 --events --triggers --routines --hex-blob --complete-insert --extended-insert --compress"

# Manually adding everything from '--opts' (except '--lock-tables' and '--quick')
# '--opts'  is blacklisted by mysqldump-secure, because it pulls in '--lock-tables' which is handled conditionally
# '--quick' is blacklisted by mysqldump-secure, because it is handled conditionally.
MYSQL_OPTS="${MYSQL_OPTS} --add-drop-table --add-locks --create-options --disable-keys --extended-insert --set-charset"



#
# Apply '--quick' only on databases that are at least X MB in size
#
# >> This option is useful for dumping large tables. It forces
# >> mysqldump to retrieve rows for a table from the server a row at
# >> a time rather than retrieving the entire row set and buffering
# >> it in memory before writing it out.
#
# Turning `--quick` off for smaller databases should be more performant.
# However, the database must fit into the available RAM, so choose a small
# value here and play around with it to see if 200MB is good for you or not.
#
# Examples:
#
# MYSQL_OPT_QUICK_MIN_SIZE=0
#  --> Enable on databases >0 MB (obviously on all databases)
#
# MYSQL_OPT_QUICK_MIN_SIZE=10
#  --> Enable on databases >10 MB
#
# MYSQL_OPT_QUICK_MIN_SIZE=10
#  --> Enable on databases >200 MB
#
MYSQL_OPTS_QUICK_MIN_SIZE=200



######################################################################
# Consistency/Transactions
######################################################################


#
# Note: Consistent mysqldumps across tables (not across all databases)
#


#
# Case 1: Only InnoDB tables inside current DB
#
# If the current dumped database only contains InnoDB tables,
# this database is then dumped with the '--single-transaction' option.
#
# With this option turned on, all tables inside this database will be dumped consistently.
# If there was any INSERT, ALTER (or other changes on the tables during the period of backup
# by another program/process), these changes will not go into dump and you will end up
# with a fully consistend dump from the time it was started doing the backup.
#
# If however the current database contains at least one table which is not using the InnoDB
# engine, the '--single-transaction' option will not be used.
# For this case see CONSISTENT_DUMP_OTHERS (below).
#
# Note:
# It is safe and recommended to leave this option turned on!
#
# Note:
# Again, this applies only to databases which only have InnoDB tables.
#
# Values:
# -------
# 0: Do not dump consistently
# 1: Dump consistently with '--single-transaction'
CONSISTENT_DUMP_ONLY_INNODB=1





#
# Case 2: Only non-InnoDB table engines (Not a single InnoDB table)
#
# If the current dumped database contains no InnoDB engines at all,
# this database is then dumped with the '--lock-tables' option.
#
# With this option turned on, all tables inside this database will be dumped consistently.
#
# However, every INSERT, ALTER (or other changing sql function) to tables inside this database
# will be blocked (and queued) for the time of the dump.
# So if you have a web application for example that is receiving lots of INSERTs, choose a time
# with least visitors, because the application will be blocked during the backup time.
#
#
# Solution 1: Convert all your databases to InnoDB
#   --> and ignore this option
#
# Solution 2: Choose a time where less or no changes to that database are expected
#   --> and set   CONSISTENT_DUMP_OTHERS=1
#
# Solution 3: Turn off this feature and live without consistent dumps.
#   --> and set   CONSISTENT_DUMP_OTHERS=0
#
# Note:
# Again, this applies to all databases which have at least 1 table engine that is NOT InnoDB
#
# Values:
# -------
# 0: Do not dump consistently: '--skip-lock-tables'
# 1: Dump consistently with:   '--lock-tables'
CONSISTENT_DUMP_NO_INNODB=1



#
# Case 3: At least 1 InnoDB table and at least one non-InnoDB table
#
# If the current dumped database contains at least one InnoDB table and at least one non-InnoDB table
# (such as MyISAM or others), this database can then be dumped in three ways:
#
#
# CONSISTENT_DUMP_MIXED_INNODB=0
# ------------------------------
# No consistency at all, applying '--skip-lock-tables'.
#
#
# CONSISTENT_DUMP_MIXED_INNODB=1
# ------------------------------
# Total consistency, applying '--lock-tables'.
#
# However, every INSERT, ALTER (or other changing sql function) to tables inside this database
# will be blocked (and queued) for the time of the dump.
# So if you have a web application for example that is receiving lots of INSERTs, choose a time
# with least visitors, because the current dumped database will be read-only
# (but all quries are queued) during the backup time.
#
# Solution 1: Convert all your tables in your databases to InnoDB
#   --> and ignore this option
#
# Solution 2: Choose a time where less or no changes to that database are expected
#   --> and set   CONSISTENT_DUMP_OTHERS=1
#
# Solution 3: Use a Master/Slave setup and always backup from slave
#   --> This is a recommendation/solution for a production environment.
#
# CONSISTENT_DUMP_MIXED_INNODB=2
# ------------------------------
# Partly consistent, applying '--single-transaction' (for the luck).
#
# All InnoDB tables will be dumped consistently, however, all others will
# not be dumped consistently.
#
#
# Values:
# -------
# 0: Do not dump consistently: '--skip-lock-tables'
# 1: Dump consistently with:   '--lock-tables'
# 2: Treat all as InnoDB:      '--single-transaction'
CONSISTENT_DUMP_MIXED_INNODB=1







######################################################################
# (OPT) Logging
######################################################################

# Log output to logfile
# 1: yes
# 0: no (Default)
LOG=1

# File permission of mysqldump-secure log.
# NOTE: Should be very strict to not give away information.
LOG_CHMOD="0600"

# Only applicable if LOG = 1
# NOTE: Must be writeable by the user who runs the script
# NOTE: Must be chmod 600
LOGFILE="/var/log/mysqldump-secure.log"



######################################################################
# (OPT) Compression
######################################################################

#
# Compression is done via gzip 9 (by default)
#

# Use compression?
# 1: yes
# 0: no (Default)
COMPRESS=1

# Specify compression options.
# The following three variables must be set, when
# COMPRESS is enabled:
# * COMPRESS_BIN: name of the binary
# * COMPRESS_ARG: arguments to pass to the binary
# * COMPRESS_EXT: extension to use

# Gzip
COMPRESS_BIN="gzip"
COMPRESS_ARG="-9 --stdout"
COMPRESS_EXT="gz"

# pigz (parallel gzip)
#COMPRESS_BIN="pigz"
#COMPRESS_ARG="-9 --stdout"
#COMPRESS_EXT="gz"

# Bzip2
#COMPRESS_BIN="bzip2"
#COMPRESS_ARG="-9 --stdout"
#COMPRESS_EXT="bz2"

# PBzip2
# (multithreaded bzip2 version)
#COMPRESS_BIN="pbzip2"
#COMPRESS_ARG="-9 --stdout"
#COMPRESS_EXT="bz2"

# xz
# (algo: lzma2)
#COMPRESS_BIN="xz"
#COMPRESS_ARG="-9 --stdout"
#COMPRESS_EXT="xz"

# LZMA
# (On modern systems it is usually an alias to 'xz --format=lzma')
#COMPRESS_BIN="lzma"
#COMPRESS_ARG="-9 --stdout"
#COMPRESS_EXT="lzma"

# LZOP
#COMPRESS_BIN="lzop"
#COMPRESS_ARG="-9 --stdout"
#COMPRESS_EXT="lzo"


######################################################################
# (OPT) Encryption
######################################################################

#
# Encryption is done via openssl smime public/private key.
# This means the files can only be decrypted with a private key
# which should be placed somewhere safe (not on the same machine).
# Encryption is done via the public key which can be readable.
# @required   openssl
#
# Examples:
#
# * Create public/private key pair
#    openssl req -x509 -nodes -newkey rsa:2048 -keyout mysqldump-secure.priv.pem -out mysqldump-secure.pub.pem
#
# * How to enccrypt? (pubkey)
#    openssl smime -encrypt -binary -text -aes256 -in file.txt -out file.txt.enc" -outform DER mysqldump-secure.pub.pem
#
# * How to decrypt? (privkey)
#    openssl smime -decrypt -in file.txt.enc -binary -inform DEM -inkey mysqldump-secure.priv.pem -out file.txt


# Encrypt database dumps?
# 1: yes
# 0: no (Default)
ENCRYPT=0

# Only applicable if ENCRYPT = 1
# OpenSSL Public key in PEM format without passphrase
OPENSSL_PUBKEY_PEM="/etc/mysqldump-secure.pub.pem"

# Only applicable if ENCRYPT = 1
# Must be valid openssl encryption algorithm
OPENSSL_ALGO_ARG="-aes256"



######################################################################
# (OPT) Automatic deletions (tmpwatch/tmpreaper)
######################################################################

#
# This relies completely on tmpwatch/tmpreamer and will delete all files recursively
# which modification time is older than X hours.
# tmpwatch/tmpreaper behavior applies:
#  * no symbolic links
#  * recursive
# @required   tmpwatch
#
# Command parsed to tmpwatch/tmpreaper
#
# tmpwatch -m ${DELETE_IF_OLDER} -v ${DUMP_PATH}/
# tmpreaper -m ${DELETE_IF_OLDER} -v ${DUMP_PATH}/
#

# Delete old files
# 1: yes
# 0: no (Default)
DELETE=0


# Choose the binary to use for deletion
# Possible values:
# * tmpwatch
# * tmpreaper
DELETE_METHOD="tmpwatch"



# Force deletion for read-only files.
# If your $DUMP_FILE_CHMOD is set to create read-only database dumps,
# tmpwatch/tmpreader will not be able to delete those files, unless you
# specify to force it via -f (--force)
#
# From manpage:
# Remove files even if EUID doesn’t have write access.
# Normally, files owned by the current EUID, with no write bit set are not removed.
DELETE_FORCE=0


# Only applicable of DELETE = 1
# Delete all files recursively which modification time (mtime)
# is older than this
# e.g.
# DELETE_IF_OLDER=720	# 30 days
#
# All valid tmpwatch/tmpreaper value-units are allowed.
# * No unit defaults to hours
# * m: minutes
# * h: hours
# * d: days
#
# Example
# * DELETE_IF_OLDER=3m  # older than 3 minutes
# * DELETE_IF_OLDER=3h  # older than 3 hours
# * DELETE_IF_OLDER=3d  # older than 3 days
# * DELETE_IF_OLDER=3   # older than 3 hours
#
DELETE_IF_OLDER=30d		# older than 30 days



######################################################################
# (OPT) Nagios Plugin Log
######################################################################

# Enable separate logfile which can be parsed by check_mysqldump-secure
# in order to report success/warn/error state to nagios server
# The logfile is in classic .ini file format and must be readable by the
# nagios user.

# Enable Nagios Logfile
# 1: yes
# 0: no (Default)
NAGIOS_LOG=1

# Only applicable if NAGIOS_LOG = 1
#
NAGIOS_LOGFILE="/var/log/mysqldump-secure.nagios.log"

# File permission of Nagios log.
# NOTE: A 'nagios user' should be able to read the file.
NAGIOS_LOG_CHMOD="0644"




######################################################################
# Misc
######################################################################

# Temporary system directory.
# This should normally not be changed as /tmp
# is the default on most systems.
#
# The tmp folder is used to store files which hold stderr as well as
# stdout of mysqldump, openssl and the used compression tool.
#
# All tmp files will be deleted at the end of the run.
#
TMP_DIR="/tmp"
