{"name":"Mysqldump-secure","tagline":"Secure mysqldump script with encryption, compression, logging and blacklisting","body":"# mysqldump-secure\r\n\r\n[General Warning](https://github.com/cytopia/mysqldump-secure#general-warning) |\r\n[Feature Overview](https://github.com/cytopia/mysqldump-secure#feature-overview) |\r\n[Installation](https://github.com/cytopia/mysqldump-secure#installation) |\r\n[Configuration](https://github.com/cytopia/mysqldump-secure#configuration) |\r\n[Contribution](https://github.com/cytopia/mysqldump-secure#contribution) |\r\n[Todo](https://github.com/cytopia/mysqldump-secure#todo) |\r\n[License](https://github.com/cytopia/mysqldump-secure#license)\r\n\r\n[![Build Status](https://travis-ci.org/cytopia/mysqldump-secure.svg?branch=master)](https://travis-ci.org/cytopia/mysqldump-secure)\r\n[![Latest Stable Version](https://poser.pugx.org/cytopia/mysqldump-secure/v/stable)](https://packagist.org/packages/cytopia/mysqldump-secure) [![Total Downloads](https://poser.pugx.org/cytopia/mysqldump-secure/downloads)](https://packagist.org/packages/cytopia/mysqldump-secure) [![Latest Unstable Version](https://poser.pugx.org/cytopia/mysqldump-secure/v/unstable)](https://packagist.org/packages/cytopia/mysqldump-secure) [![License](https://poser.pugx.org/cytopia/mysqldump-secure/license)](doc/LICENSE)\r\n[![POSIX](https://img.shields.io/badge/posix_compliant-100%25-brightgreen.svg)](https://en.wikipedia.org/?title=POSIX)\r\n\r\n\r\n\r\nMysqldump-secure is a POSIX compliant shell backup script for MySQL databases with strong security in mind.\r\nIt will backup every available database (which is readable by the specified user) as a separate file with the possibility to opt out via blacklisting. Dumped databases can optionally be piped directly to gzip or openssl in order to compress and/or encrypt the backup. Encryption is done before the file is written to disk to avoid possible race conditions.\r\n\r\nFind the whole post at [www.everythingcli.org](http://www.everythingcli.org/index.php/2015/06/13/secure-mysqldump-script-with-encryption-and-compression/)\r\n\r\n\r\n## General Warning\r\nMost mysqldump scripts I have seen out there do something like this:\r\n```shell\r\nmysqldump --user=root --password=foo --host localhost database > database.sql\r\n```\r\n**THIS IS REALLY DANGEROUS**\r\n\r\nEven if run inside a script, you can see the mysql password in cleartext in `ps aux`.\r\nYou should always define your credentials in a my.cnf file with `chmod 400` or you can loose all your databases to everybody with access to that machine.\r\n\r\n> [MySQL End-User Guidelines for Password Security](https://dev.mysql.com/doc/refman/5.7/en/password-security-user.html)\r\n\r\n> Specifying a password on the command line should be considered insecure. You can use an option file to avoid giving the password on the command line.\r\n\r\n\r\n\r\n## Feature Overview\r\n\r\n* Encryption\r\n* Compression\r\n* Blacklisting\r\n* Tmpwatch integration\r\n* File logging\r\n* Error checking / security validation\r\n* Custom mysqldump options\r\n\r\n\r\n## Installation\r\n\r\n### Automated installation\r\nAutomated installation and setting of access rights via `unix Makefile`.\r\n```shell\r\nsudo make install\r\n```\r\nAdjust the configuration and you are good to go.\r\n```shell\r\nvim /etc/mysqldump-secure.conf\r\nvim /etc/mysqldump-secure.cnf\r\n```\r\n\r\n\r\n### Manual installation\r\nIf you do not trust the `Makefile` you can also manually copy the files and adjust file permissions by hand.\r\n```shell\r\n# Copy the script\r\ncp mysqldump-secure.sh /usr/local/sbin/mysqldump-secure.sh\r\nchmod +x /usr/local/sbin/mysqldump-secure.sh\r\n\r\n# Copy the config files\r\ncp mysqldump-secure.conf /etc/mysqldump-secure.conf\r\nchmod 400 /etc/mysqldump-secure.conf\r\n\r\ncp mysqldump-secure.cnf /etc/mysqldump-secure.cnf\r\nchmod 400 /etc/mysqldump-secure.cnf\r\n\r\n# Create the backup dir\r\nmkdir -p /shared/backup/databases\r\nchmod 700 /shared/backup/databases\r\n\r\n# Create the logfile (optionally)\r\ntouch /var/log/mysqldump-secure.log\r\nchmod 600 /var/log/mysqldump-secure.log\r\n\r\n```\r\nAdjust the configuration and you are good to go.\r\n```shell\r\nvim /etc/mysqldump-secure.conf\r\nvim /etc/mysqldump-secure.cnf\r\n```\r\n\r\n### Cronjob\r\nOnce you have tested the script you can setup the cronjob:\r\n```\r\n# Dump MySQL Databases at 03:15 every day\r\n  15 3  *  *  * /bin/sh /usr/local/sbin/mysqldump-secure.sh\r\n```\r\n\r\n\r\n## Configuration\r\nBefore you start make sure to have the credentials setup correctly.\r\n\r\n1. Copy [mysqldump-secure.cnf](mysqldump-secure.cnf) to `/etc/mysqldump-secure.cnf`\r\n2. Adjust credentials: `vi /etc/mysqldump-secure.cnf`\r\n3. Set permissions: `chmod 400 /etc/mysqldump-secure.cnf`\r\n4. Test connection: `mysql`\r\n\r\nIf you see the mysql prompt then everything went fine and you can continue configuring the program.\r\n\r\n\r\n### Encryption\r\nEncryption is done by public/private key via [OpenSSL SMIME](https://www.openssl.org/docs/apps/smime.html) which also supports encrypting large files.\r\n\r\n> The primary advantage of public-key cryptography is increased security and convenience: private keys never need to be transmitted or revealed to anyone. In a secret-key system, by contrast, the secret keys must be transmitted (either manually or through a communication channel) since the same key is used for encryption and decryption. A serious concern is that there may be a chance that an enemy can discover the secret key during transmission.\r\n> [[1]](http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/advantages-and-disadvantages.htm)\r\n\r\nSee [examples](examples) for scripts to generate public/private keys, encrypt and decrypt.\r\n\r\n#### Create the keypair\r\nIn order to enable encryption you need a public/private keypair. If you don't know how to generate them you can use provided script: [create-keypair.sh](examples/create-keypair.sh).\r\n\r\nOnce you have the keys\r\n\r\n1. Move the private key away from the server to a very secure location.\r\n2. Copy the public key to `/etc/mysqldump-secure.pub.pem`\r\n3. `chmod 400 /etc/mysqldump-secure.pub.pem`\r\n\r\nOpen [/etc/mysqldump-secure.conf](mysqldump-secure.conf) and set the following variables\r\n```shell\r\nENCRYPT=1\r\nOPENSSL_PUBKEY_PEM=\"/etc/mysqldump-secure.pub.pem\"\r\nOPENSSL_ALGO_ARG=\"-aes256\"\r\n```\r\n\r\n\r\n### Compression\r\nMySQL dumps can be piped directly to `gzip` before writing to disk.\r\n\r\nOpen [/etc/mysqldump-secure.conf](mysqldump-secure.conf) and set the following variables\r\n```shell\r\nCOMPRESS=1\r\n```\r\n\r\n### Blacklisting\r\nMysqldump-secure uses opt-out instead of opt-in and will by default dump every readable database to disk. If you however want to manually ignore certain databases, such as `information_schema` or `performance_schema` you can specify them in a ignore list.\r\n\r\n**Opt-out vs Opt-in**\r\nThe disadvantage of opt-out is that you might backup a database that is not needed. On the other hand if you use opt-in you could forget a database that was actually needed to be backed up.\r\n\r\nOpen [/etc/mysqldump-secure.conf](mysqldump-secure.conf) and set the following variables\r\n```shell\r\nIGNORE=\"information_schema performance_schema\"\r\n```\r\n\r\n### Tmpwatch integration\r\nIf you have [tmpwatch](http://linux.die.net/man/8/tmpwatch) installed you can specify to automatically delete backups older than X hours.\r\n\r\nOpen [/etc/mysqldump-secure.conf](mysqldump-secure.conf) and set the following variables\r\n```shell\r\nDELETE=720 # 720 hours\r\n```\r\n\r\n\r\n### File logging\r\nMysqldump-secure includes a mechanism to log every action (debug, info, warn and error) to file. The script also follows the practise of sending proper exit codes (0 for everything went fine and >0 for I had some errors).\r\n\r\nOpen [/etc/mysqldump-secure.conf](mysqldump-secure.conf) and set the following variables\r\n```shell\r\nLOG=1\r\nLOGFILE=\"/var/log/mysqldump-secure.log\"\r\n```\r\n\r\n\r\n### Error checking / security validation\r\nThe script performs heavy error checking and is able to fall back to default options. Checking includes:\r\n* Logfile exists\r\n* Logfile is writeable\r\n* Auto creation of logfile\r\n* Logging turned off automatically\r\n* Destination dir exists\r\n* Destination dir is writeable\r\n* Auto creation of destination dir\r\n* Required system binaries exist\r\n* MySQL credentials are valid\r\n\r\n### Custom mysqldump options\r\nYou can specify custom mysqldump parameters in the configuration file. The default configuration dumps databases including events, triggers and routines. The dump is done via `--single-transaction` to also take transactional tables into account. All those parameters are customizable so alter them as desired.\r\n\r\nOpen [/etc/mysqldump-secure.conf](mysqldump-secure.conf) and set the following variables\r\n```shell\r\nMYSQL_OPTS='--events --triggers --routines --single-transaction --opt'\r\n```\r\nSee [mysqldump](https://dev.mysql.com/doc/refman/5.0/en/mysqldump.html) for all possible parameters.\r\n\r\n\r\n## Contribution\r\nContributors are welcome. See [contribution guidelines](doc/CONTRIBUTING.md).\r\n\r\n\r\n## Todo\r\nSee [Todo list](doc/TODO.md)\r\n\r\n\r\n\r\n## License\r\n[![License](https://poser.pugx.org/cytopia/mysqldump-secure/license)](doc/LICENSE)\r\n","google":"UA-51797082-3","note":"Don't delete this file! It's used internally to help with page regeneration."}