# Copy me to /etc/mysqldump-secure.conf or
# use Makefile to install.
# Note: This file must be chmod 0400


# Target output Directory
TARGET="/shared/backup/databases"

# Prefix for database dump file
PREFIX="$(date '+%Y-%m-%d')_$(date '+%H-%M')__"

# File/Folder permission of Target directory ($TARGET)
# and the actual dumped databases.
# If not otherwise needed, leave the
# protective secure default values
TARGET_DIR_CHMOD="700"
TARGET_FILE_CHMOD="400"




######################################################################
# MySQL
######################################################################

# Never ever pass the mysql credentials on the command line via
# --password / -p as this can be seen by all users in ps aux or top.
# Instead use a *.cnf file with a user that only has read access
# @see mysqldump-secure.cnf for example
#
# NOTE: Must be chmod 0400
MYSQL_CNF_FILE='/etc/mysqldump-secure.cnf'

# MySQLDump Options
# --routines (Off by default)
# --events   (Off by default)
# --triggers (On by default)
# --opt      (On by default)
#   Included in --opt:
#    --add-drop-table
#    --add-locks
#    --create-options
#    --disable-keys
#    --extended-insert
#    --lock-tables
#    --quick
#    --set-charset
MYSQL_OPTS='--events --triggers --routines --single-transaction --opt'

# Opt out
# Databases not to be dumped.
# (space separated)
IGNORE="information_schema performance_schema"


# A list of databases that are explicitly required.
# If any of the specified required databases is not existent
# in the MySQL database or specified in IGNORE,
# (hence not dumped to disk), the script will write an error to stdout and LOG.
#
# Additionally, this information is also used by the nagios plugin and will automatically
# throw an error in nagios when any of the below specified databases were not found and/or not dumped.
#
# NOTE: The here specified databases are not guaranteed to be dumped,
#       because they might not even exist, it is rather
#       a method of letting you know, that they could not be dumped.
REQUIRE="mysql"



######################################################################
# Logging
######################################################################

# Log output to logfile
# 1: yes
# 0: no (Default)
LOG=1


# Only applicable if LOG = 1
# NOTE: Must be writeable by the user who runs the script
# NOTE: Must be chmod 600
LOGFILE="/var/log/mysqldump-secure.log"



######################################################################
# Compression
######################################################################

#
# Compression is done via gzip 9
#

# Use gzip compression?
# 1: yes
# 0: no (Default)
COMPRESS=1



######################################################################
# Encryption
######################################################################

#
# Encryption is done via openssl smime public/private key.
# This means the files can only be decrypted with a private key
# which should be placed somewhere safe (not on the same machine).
# Encryption is done via the public key which can be readable.
# @required   openssl
#
# Examples:
#
# * Create public/private key pair
#    openssl req -x509 -nodes -newkey rsa:2048 -keyout mysqldump-secure.priv.pem -out mysqldump-secure.pub.pem
#
# * How to enccrypt? (pubkey)
#    openssl smime -encrypt -binary -text -aes256 -in file.txt -out file.txt.enc" -outform DER mysqldump-secure.pub.pem
#
# * How to decrypt? (privkey)
#    openssl smime -decrypt -in file.txt.enc -binary -inform DEM -inkey mysqldump-secure.priv.pem -out file.txt



# Encrypt database dumps?
# 1: yes
# 0: no (Default)
ENCRYPT=0

# Only applicable if ENCRYPT = 1
# OpenSSL Public key in PEM format without passphrase
OPENSSL_PUBKEY_PEM="/etc/mysqldump-secure.pub.pem"

# Only applicable if ENCRYPT = 1
# Must be valid openssl encryption algorithm
OPENSSL_ALGO_ARG="-aes256"



######################################################################
# Delete old files?
######################################################################

#
# This relies completely on tmpwatch and will delete all files recursively
# which modification time is older than X hours.
# tmpwatch behavior applies:
#  * no symbolic links
#  * recursive
# @required   tmpwatch
#
# Command parsed to tmpwatch
#
# tmpwatch -m ${DELETE_IF_OLDER} -v ${TARGET}/
#

# Delete old files
# 1: yes
# 0: no (Default)
DELETE=0


# Only applicable of DELETE = 1
# Delete all files recursively which modification time
# is older than this
# e.g.
# DELETE_IF_OLDER=720	# 30 days
#
# NOTE: Only positive integers greater than zero are allowed
#       Everything else will disable deletion.
DELETE_IF_OLDER=720		# older than 30 days



######################################################################
# Nagios Logging
######################################################################

# Enable separate logfile which can be parsed by check_mysqldump-secure
# in order to report success/warn/error state to nagios server
# The logfile is in classic .ini file format and must be readable by the
# nagios user.

# Enable Nagios Logfile
# 1: yes
# 0: no (Default)
NAGIOS_LOG=0

# Only applicable if NAGIOS_LOG = 1
# NOTE: Must be chmod 644
NAGIOS_LOGFILE="/var/log/mysqldump-secure.nagios.log"
